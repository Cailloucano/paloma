// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evm/turnstone/turnstone.proto

package turnstone

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Valset struct {
	ValsetID    uint64 `protobuf:"varint,1,opt,name=valsetID,proto3" json:"valsetID,omitempty"`
	TurnstoneID string `protobuf:"bytes,2,opt,name=turnstoneID,proto3" json:"turnstoneID,omitempty"`
	// string - is actually hex representation
	HexAddress []string `protobuf:"bytes,3,rep,name=hexAddress,proto3" json:"hexAddress,omitempty"`
	Powers     []uint32 `protobuf:"varint,4,rep,packed,name=powers,proto3" json:"powers,omitempty"`
}

func (m *Valset) Reset()         { *m = Valset{} }
func (m *Valset) String() string { return proto.CompactTextString(m) }
func (*Valset) ProtoMessage()    {}
func (*Valset) Descriptor() ([]byte, []int) {
	return fileDescriptor_33169dad20009266, []int{0}
}
func (m *Valset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Valset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Valset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Valset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Valset.Merge(m, src)
}
func (m *Valset) XXX_Size() int {
	return m.Size()
}
func (m *Valset) XXX_DiscardUnknown() {
	xxx_messageInfo_Valset.DiscardUnknown(m)
}

var xxx_messageInfo_Valset proto.InternalMessageInfo

func (m *Valset) GetValsetID() uint64 {
	if m != nil {
		return m.ValsetID
	}
	return 0
}

func (m *Valset) GetTurnstoneID() string {
	if m != nil {
		return m.TurnstoneID
	}
	return ""
}

func (m *Valset) GetHexAddress() []string {
	if m != nil {
		return m.HexAddress
	}
	return nil
}

func (m *Valset) GetPowers() []uint32 {
	if m != nil {
		return m.Powers
	}
	return nil
}

type SubmitLogicCall struct {
	TurnstoneID        uint64 `protobuf:"varint,1,opt,name=turnstoneID,proto3" json:"turnstoneID,omitempty"`
	ChainID            uint64 `protobuf:"varint,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	HexContractAddress string `protobuf:"bytes,3,opt,name=hexContractAddress,proto3" json:"hexContractAddress,omitempty"`
	Abi                []byte `protobuf:"bytes,4,opt,name=abi,proto3" json:"abi,omitempty"`
	Payload            []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SubmitLogicCall) Reset()         { *m = SubmitLogicCall{} }
func (m *SubmitLogicCall) String() string { return proto.CompactTextString(m) }
func (*SubmitLogicCall) ProtoMessage()    {}
func (*SubmitLogicCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_33169dad20009266, []int{1}
}
func (m *SubmitLogicCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitLogicCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitLogicCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitLogicCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitLogicCall.Merge(m, src)
}
func (m *SubmitLogicCall) XXX_Size() int {
	return m.Size()
}
func (m *SubmitLogicCall) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitLogicCall.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitLogicCall proto.InternalMessageInfo

func (m *SubmitLogicCall) GetTurnstoneID() uint64 {
	if m != nil {
		return m.TurnstoneID
	}
	return 0
}

func (m *SubmitLogicCall) GetChainID() uint64 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *SubmitLogicCall) GetHexContractAddress() string {
	if m != nil {
		return m.HexContractAddress
	}
	return ""
}

func (m *SubmitLogicCall) GetAbi() []byte {
	if m != nil {
		return m.Abi
	}
	return nil
}

func (m *SubmitLogicCall) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type UpdateValset struct {
	TurnstoneID uint64 `protobuf:"varint,1,opt,name=turnstoneID,proto3" json:"turnstoneID,omitempty"`
	ValsetID    uint64 `protobuf:"varint,2,opt,name=valsetID,proto3" json:"valsetID,omitempty"`
}

func (m *UpdateValset) Reset()         { *m = UpdateValset{} }
func (m *UpdateValset) String() string { return proto.CompactTextString(m) }
func (*UpdateValset) ProtoMessage()    {}
func (*UpdateValset) Descriptor() ([]byte, []int) {
	return fileDescriptor_33169dad20009266, []int{2}
}
func (m *UpdateValset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateValset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateValset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateValset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateValset.Merge(m, src)
}
func (m *UpdateValset) XXX_Size() int {
	return m.Size()
}
func (m *UpdateValset) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateValset.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateValset proto.InternalMessageInfo

func (m *UpdateValset) GetTurnstoneID() uint64 {
	if m != nil {
		return m.TurnstoneID
	}
	return 0
}

func (m *UpdateValset) GetValsetID() uint64 {
	if m != nil {
		return m.ValsetID
	}
	return 0
}

func init() {
	proto.RegisterType((*Valset)(nil), "palomachain.paloma.evm.turnstone.Valset")
	proto.RegisterType((*SubmitLogicCall)(nil), "palomachain.paloma.evm.turnstone.SubmitLogicCall")
	proto.RegisterType((*UpdateValset)(nil), "palomachain.paloma.evm.turnstone.UpdateValset")
}

func init() { proto.RegisterFile("evm/turnstone/turnstone.proto", fileDescriptor_33169dad20009266) }

var fileDescriptor_33169dad20009266 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x59, 0x5a, 0x51, 0x46, 0x8c, 0x66, 0x63, 0xcc, 0x86, 0xc4, 0xcd, 0x86, 0x53, 0x4f,
	0xed, 0x81, 0x27, 0x50, 0xb8, 0x90, 0xe0, 0xa5, 0x46, 0x0f, 0xde, 0xb6, 0xed, 0xa6, 0x6d, 0xd2,
	0x76, 0x9b, 0x76, 0x41, 0xb8, 0xf8, 0x0c, 0xbe, 0x86, 0x6f, 0xe2, 0x91, 0xa3, 0x47, 0x03, 0x2f,
	0x62, 0xba, 0x14, 0x28, 0xc6, 0xc4, 0xdb, 0xf7, 0x4f, 0xa7, 0x33, 0xff, 0xce, 0x0c, 0xdc, 0x8a,
	0x79, 0xea, 0xa8, 0x59, 0x91, 0x95, 0x4a, 0x66, 0xe2, 0x40, 0x76, 0x5e, 0x48, 0x25, 0x31, 0xcb,
	0x79, 0x22, 0x53, 0xee, 0x47, 0x3c, 0xce, 0xec, 0x2d, 0xdb, 0x62, 0x9e, 0xda, 0xfb, 0xbc, 0xfe,
	0x75, 0x28, 0x43, 0xa9, 0x93, 0x9d, 0x8a, 0xb6, 0xff, 0x0d, 0xde, 0xa0, 0xf3, 0xcc, 0x93, 0x52,
	0x28, 0xdc, 0x87, 0xb3, 0xb9, 0xa6, 0xc9, 0x98, 0x20, 0x86, 0x2c, 0xd3, 0xdd, 0x6b, 0xcc, 0xe0,
	0x7c, 0x5f, 0x68, 0x32, 0x26, 0x6d, 0x86, 0xac, 0xae, 0xdb, 0x0c, 0x61, 0x0a, 0x10, 0x89, 0xc5,
	0x5d, 0x10, 0x14, 0xa2, 0x2c, 0x89, 0xc1, 0x0c, 0xab, 0xeb, 0x36, 0x22, 0xf8, 0x06, 0x3a, 0xb9,
	0x7c, 0x15, 0x45, 0x49, 0x4c, 0x66, 0x58, 0x17, 0x6e, 0xad, 0x06, 0x1f, 0x08, 0x2e, 0x1f, 0x67,
	0x5e, 0x1a, 0xab, 0xa9, 0x0c, 0x63, 0x7f, 0xc4, 0x93, 0xe4, 0x77, 0xb7, 0xad, 0x99, 0xa3, 0x6e,
	0x04, 0x4e, 0xf5, 0x4b, 0x6b, 0x2f, 0xa6, 0xbb, 0x93, 0xd8, 0x06, 0x1c, 0x89, 0xc5, 0x48, 0x66,
	0xaa, 0xe0, 0xbe, 0x3a, 0xf8, 0xa9, 0x0c, 0xff, 0xf1, 0x05, 0x5f, 0x81, 0xc1, 0xbd, 0x98, 0x98,
	0x0c, 0x59, 0x3d, 0xb7, 0xc2, 0xaa, 0x76, 0xce, 0x97, 0x89, 0xe4, 0x01, 0x39, 0xd1, 0xd1, 0x9d,
	0x1c, 0x4c, 0xa1, 0xf7, 0x94, 0x07, 0x5c, 0x89, 0x7a, 0x62, 0xff, 0xfb, 0x6c, 0xce, 0xb4, 0x7d,
	0x3c, 0xd3, 0xfb, 0x87, 0xcf, 0x35, 0x45, 0xab, 0x35, 0x45, 0xdf, 0x6b, 0x8a, 0xde, 0x37, 0xb4,
	0xb5, 0xda, 0xd0, 0xd6, 0xd7, 0x86, 0xb6, 0x5e, 0x86, 0x61, 0xac, 0xa2, 0x99, 0x67, 0xfb, 0x32,
	0x75, 0x1a, 0x6b, 0xad, 0xd9, 0x59, 0x38, 0xfa, 0x14, 0x96, 0xb9, 0x28, 0x0f, 0x67, 0xe0, 0x75,
	0xf4, 0x3e, 0x87, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x22, 0x05, 0xea, 0x3d, 0x28, 0x02, 0x00,
	0x00,
}

func (m *Valset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Valset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Valset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Powers) > 0 {
		dAtA2 := make([]byte, len(m.Powers)*10)
		var j1 int
		for _, num := range m.Powers {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTurnstone(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HexAddress) > 0 {
		for iNdEx := len(m.HexAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HexAddress[iNdEx])
			copy(dAtA[i:], m.HexAddress[iNdEx])
			i = encodeVarintTurnstone(dAtA, i, uint64(len(m.HexAddress[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TurnstoneID) > 0 {
		i -= len(m.TurnstoneID)
		copy(dAtA[i:], m.TurnstoneID)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.TurnstoneID)))
		i--
		dAtA[i] = 0x12
	}
	if m.ValsetID != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.ValsetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmitLogicCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitLogicCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitLogicCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Abi) > 0 {
		i -= len(m.Abi)
		copy(dAtA[i:], m.Abi)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.Abi)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HexContractAddress) > 0 {
		i -= len(m.HexContractAddress)
		copy(dAtA[i:], m.HexContractAddress)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.HexContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainID != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x10
	}
	if m.TurnstoneID != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.TurnstoneID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateValset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateValset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateValset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValsetID != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.ValsetID))
		i--
		dAtA[i] = 0x10
	}
	if m.TurnstoneID != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.TurnstoneID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTurnstone(dAtA []byte, offset int, v uint64) int {
	offset -= sovTurnstone(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Valset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValsetID != 0 {
		n += 1 + sovTurnstone(uint64(m.ValsetID))
	}
	l = len(m.TurnstoneID)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	if len(m.HexAddress) > 0 {
		for _, s := range m.HexAddress {
			l = len(s)
			n += 1 + l + sovTurnstone(uint64(l))
		}
	}
	if len(m.Powers) > 0 {
		l = 0
		for _, e := range m.Powers {
			l += sovTurnstone(uint64(e))
		}
		n += 1 + sovTurnstone(uint64(l)) + l
	}
	return n
}

func (m *SubmitLogicCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TurnstoneID != 0 {
		n += 1 + sovTurnstone(uint64(m.TurnstoneID))
	}
	if m.ChainID != 0 {
		n += 1 + sovTurnstone(uint64(m.ChainID))
	}
	l = len(m.HexContractAddress)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.Abi)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *UpdateValset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TurnstoneID != 0 {
		n += 1 + sovTurnstone(uint64(m.TurnstoneID))
	}
	if m.ValsetID != 0 {
		n += 1 + sovTurnstone(uint64(m.ValsetID))
	}
	return n
}

func sovTurnstone(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTurnstone(x uint64) (n int) {
	return sovTurnstone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Valset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Valset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Valset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetID", wireType)
			}
			m.ValsetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnstoneID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TurnstoneID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HexAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HexAddress = append(m.HexAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTurnstone
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Powers = append(m.Powers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTurnstone
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTurnstone
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTurnstone
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Powers) == 0 {
					m.Powers = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTurnstone
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Powers = append(m.Powers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Powers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitLogicCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitLogicCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitLogicCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnstoneID", wireType)
			}
			m.TurnstoneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TurnstoneID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HexContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HexContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abi = append(m.Abi[:0], dAtA[iNdEx:postIndex]...)
			if m.Abi == nil {
				m.Abi = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateValset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateValset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateValset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnstoneID", wireType)
			}
			m.TurnstoneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TurnstoneID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetID", wireType)
			}
			m.ValsetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTurnstone(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTurnstone
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTurnstone
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTurnstone
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTurnstone        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTurnstone          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTurnstone = fmt.Errorf("proto: unexpected end of group")
)
